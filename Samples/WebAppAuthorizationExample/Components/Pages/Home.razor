@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using ManiaAPI.ManiaPlanetAPI
@using Microsoft.Extensions.Caching.Hybrid

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ManiaPlanetAPI ManiaPlanetAPI
@inject HybridCache Cache

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

@if (user?.Identity?.IsAuthenticated ?? false)
{
    <p>
        Welcome, @TmEssentials.TextFormatter.Deformat(user.Identity.Name ?? user.FindFirstValue(ClaimTypes.NameIdentifier) ?? "[unnamed]")!
        <a href="logout">Logout</a>
    </p>

    <ul>
        @foreach (var claim in user.Claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>

    <a href="dedicated-servers">Dedicated servers</a>
}
else
{
    <p><a href="login/maniaplanet">Login with ManiaPlanet</a></p>
    <p><a href="login/trackmania">Login with Trackmania</a></p>
}

<h2>Zones</h2>

@if (zones is null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var zone in zones)
        {
            <li>@zone</li>
        }
    </ul>
}

@code {
    private ClaimsPrincipal? user;
    private IEnumerable<string>? zones;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        zones = await Cache.GetOrCreateAsync("zones", async token => await ManiaPlanetAPI.GetZonesAsync(token));
    }
}